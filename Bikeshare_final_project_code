import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    while True:
        city = input("Which city would you like to check?")
        city = city.lower()
        if city in ['chicago', 'new york city', 'washington']:
            break
        else:
            print("Invalid input. Please enter a valid input")
    # TO DO: get user input for month (all, january, february, ... , june)
    valid_months = ['january', 'february', 'march', 'april', 'may', 'june', 'all']

    month = ''
    while month not in valid_months:
        month = input("Please enter the name of a month from January to June to analyze, or type 'all' to include all months:").lower()
        if month not in valid_months:
            print("Invalid input. Please enter a valid input.")

    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    while True:
        day = input("Please enter the name of the day to analyze, or type 'all' to include all days:")
        day = day.lower()
        if day in ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday', 'all']:
            break
        else: 
            print("Invalid input. Please enter a valid input")

    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    #
    df = pd.read_csv(CITY_DATA[city])   
    #
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    #
    df['Hour'] = df['Start Time'].dt.hour
    #
    df['Month'] = df['Start Time'].dt.month
    df['day of the week'] = df['Start Time'].dt.weekday
    #
    if month != 'all':
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1
        df = df[df['Month'] == month]
    
    if day != 'all':
        days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        day = days.index(day) 
        df = df[df['day of the week'] == day]

    return df

def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    print('Most common trip month: ', df['Month'].value_counts().index[0])

    # TO DO: display the most common day of week
    print('Most common trip day of week: ', df['day of the week'].value_counts().index[0])

    # TO DO: display the most common start hour
    print('Most common start hour: ',df['Hour'].value_counts().index[0])

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    print('Most commonly used start station: ',df['Start Station'].value_counts().index[0])

    # TO DO: display most commonly used end station
    print('Most commonly used end station: ',df['End Station'].value_counts().index[0])

    # TO DO: display most frequent combination of start station and end station trip
    print("Most frequent combination of start station and end station: ", "From" + " " +(df['Start Station'] + " " + "to --->" + " " + df['End Station']).mode()[0])

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    print('Total travel time: ', df['Trip Duration'].sum())

    # TO DO: display mean travel time
    print('Average travel time: ', df['Trip Duration'].mean())

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df, city):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    print('Number of user types: ', df['User Type'].value_counts())
    
    city = city.strip().lower()
    if city == 'chicago' or city == 'new york city':
        # TO DO: Display counts of gender
        print('Counts of gender: ', df['Gender'].value_counts())     

        # TO DO: Display earliest, most recent, and most common year of birth
        print('Earliest year of birth: ', df['Birth Year'].sort_values().iloc[0])
        print('Most recent year of birth: ', df['Birth Year'].sort_values(ascending = False).iloc[0])
        print('Most common year of birth: ', df['Birth Year'].value_counts().index[0])
 

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df, city)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
    main()
